AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'NYA Admin Server'

Parameters:
  UserPoolId:
    Type: String
    Description: NYA Admin User Pool for Cognito authentication
    Default: "us-east-1_Mcx33RgTq"
  Audience:
    Type: String
    Description: Client ID in NYA Admin user pool 
    Default: "2ne4im216icdqmmu78pk1abede" 

Globals:
  Function:
    Runtime: python3.8
    Timeout: 15

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: UserAuth
        Authorizers:
          UserAuth:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowHeaders:
          - Authorization
          - Content-Type
        AllowMethods: 
          - GET
          - POST
          - PUT
        AllowOrigins:
          - http://localhost:8080
          - https://simon50.com
          - https://www.simon50.com
          - http://simon50.com
          - http://www.simon50.com
          - http://localhost:3000
          
  # Test HTTP call
  test:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: test.lambda_handler
      Description: 'Test API response'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/
      Events:
        TestCall:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE
  # Test HTTP call
  testAuth:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: testAuth.lambda_handler
      Description: 'Authenticated Test API response'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/
      Events:
        TestAuth:
          Type: HttpApi
          Properties:
            Path: /auth
            Method: GET
            ApiId: !Ref HttpApi
        

  # Auth HTTP Calls
  login:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: login.lambda_handler
      Description: 'Process userID/Password or refreshToken authentication'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/auth
      Events:
        Login:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE
  passwordResetRequest:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: passwordResetRequest.lambda_handler
      Description: 'Request password reset process be started'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/auth
      Events:
        PasswordResetRequest:
          Type: HttpApi
          Properties:
            Path: /auth/password/reset
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE
  userChangePassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: userChangePassword.lambda_handler
      Description: 'User reset password based upon Auth challenge'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/auth
      Events:
        UserChangePassword:
          Type: HttpApi
          Properties:
            Path: /auth/password/change
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: NONE

  # Company HTTP Calls
  getCompany:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getCompany.lambda_handler
      Description: 'Get all details for a specific company'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        GetCompany:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company
            Method: GET
  getCompanyList:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getCompanyList.lambda_handler
      Description: 'Get summary details for all companies matching the optional filter'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        GetCompanyList:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company/list
            Method: GET            
  getCompanyEmailList:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getCompanyEmailList.lambda_handler
      Description: 'Get summary details for all companies showing email status'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        GetCompanyEmailList:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company/email
            Method: GET            
  getCompanyListStatus:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getCompanyListStatus.lambda_handler
      Description: 'Get details for companies based upon status/period filters'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        GetCompanyListStatus:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company/list/status
            Method: GET            
  updateCompany:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: updateCompany.lambda_handler
      Description: 'Update Company record'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        UpdateCompany:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company
            Method: POST            
  createCompany:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: createCompany.lambda_handler
      Description: 'Create Company record'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/company
      Events:
        CreateCompany:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /company
            Method: PUT            
              
              
 # Person HTTP Calls
  getPerson:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getPerson.lambda_handler
      Description: 'Get all data held on a specific person'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/person
      Events:
        GetPerson:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /person
            Method: GET
  getPersonList:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getPersonList.lambda_handler
      Description: 'Get summary details of all Person records matching the optional filter'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/person
      Events:
        GetPersonList:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /person/list
            Method: GET              
  updatePerson:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: updatePerson.lambda_handler
      Description: 'Update Person record'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/person
      Events:
        UpdatePerson:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /person
            Method: POST       
  createPerson:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: createPerson.lambda_handler
      Description: 'Create Person record'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/person
      Events:
        CreatePerson:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /person
            Method: PUT            
            
            
  # eMail HTTP Calls
  templateList:
    Type: 'AWS::Serverless::Function' 
    Properties:
      Handler: templateList.lambda_handler
      Description: 'List all Templates'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/email
      Events:
        TemplateList:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /email/template/list
            Method: GET
  getTemplate:
    Type: 'AWS::Serverless::Function' 
    Properties:
      Handler: getTemplate.lambda_handler
      Description: 'Get Template Data'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/email
      Events:
        GetTemplate:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /email/template
            Method: GET
  sendEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sendEmail.lambda_handler
      Description: 'Send email communication to company'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/email
      Events:
        SendEmail:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /email
            Method: POST
  sendMemberEmail:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: sendMemberEmail.lambda_handler
      Description: 'Send email communication to NYA Member'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/email
      Events:
        SendMemberEmail:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /email/member
            Method: POST

  # CTA HTTP Calls
  validateLink:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: validateLink.lambda_handler
      Description: 'Validate the CTA link'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        ValidateLink:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/validate
            Method: GET
            Auth:
              Authorizer: NONE
  validateCompany:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: validateCompany.lambda_handler
      Description: 'Validate the CTA link - Company Only'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        ValidateCompany:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/validatecompany
            Method: GET
            Auth:
              Authorizer: NONE
  validateMember:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: validateMember.lambda_handler
      Description: 'Validate the CTA link - Member Only'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        ValidateMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/validatemember
            Method: GET
            Auth:
              Authorizer: NONE
  
  confirmationResponse:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: confirmationResponse.lambda_handler
      Description: 'Send email communication to company'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        ConfirmationResponse:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/confirmation
            Method: GET
            Auth:
              Authorizer: NONE
  makeAsk:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: makeAsk.lambda_handler
      Description: 'Post company request to Company reporting'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        MakeAsk:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/ask
            Method: POST
            Auth:
              Authorizer: NONE
  postComment:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: postComment.lambda_handler
      Description: 'Post company request to Company reporting'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        PostComment:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/comment
            Method: POST
            Auth:
              Authorizer: NONE
  uploadReportFile:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: uploadReportFile.lambda_handler
      Description: 'Upload reporting file to S3'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        UploadReportFile:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/upload
            Method: POST
            Auth:
              Authorizer: NONE
  postContact:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: postContact.lambda_handler
      Description: 'Post Company Reporting contact'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        PostComment:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/contact
            Method: POST
            Auth:
              Authorizer: NONE
  updateMember:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: updateMember.lambda_handler
      Description: 'Update Person (Member) record'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        UpdateMember:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/member
            Method: POST
            Auth:
              Authorizer: NONE
  uploadMemberPhoto:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: uploadMemberPhoto.lambda_handler
      Description: 'Upload photo from Member'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/cta
      Events:
        UploadMemberPhoto:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /cta/member/photo
            Method: POST
            Auth:
              Authorizer: NONE
              
  # File HTTP Calls
  uploadFile:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: uploadFile.lambda_handler
      Description: 'Upload file to S3'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/file
      Events:
        UploadFile:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /file
            Method: POST
  downloadFile:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: downloadFile.lambda_handler
      Description: 'Download file from S3'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/file
      Events:
        UploadFile:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /file
            Method: GET

  # Admin HTTP Calls
  getPeriodData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getPeriodData.lambda_handler
      Description: 'Get Period Data'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/admin
      Events:
        GetPeriodData:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /admin/periods
            Method: GET
  updatePeriodData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: updatePeriodData.lambda_handler
      Description: 'Update Period Data'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/admin
      Events:
        UpdatePeriodData:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /admin/periods
            Method: POST
  getUserList:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getUserList.lambda_handler
      Description: 'Get List of Users'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/admin
      Events:
        getUserList:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /admin/users
            Method: GET
  createNewUser:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: createNewUser.lambda_handler
      Description: 'Create New User Record - Admin'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/admin
      Events:
        CreateNewUser:
          Type: HttpApi
          Properties:
            Path: /admin/user
            Method: POST
            ApiId: !Ref HttpApi
  adminChangePassword:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: adminChangePassword.lambda_handler
      Description: 'Change User Password - Admin'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/admin
      Events:
        AdminChangePassword:
          Type: HttpApi
          Properties:
            Path: /admin/user/password
            Method: POST
            ApiId: !Ref HttpApi
            

  # Dashboard/Home Screen HTTP Calls
  getDashboardData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: getDashboardData.lambda_handler
      Description: 'Get Dashboard Data'
      Role: 'arn:aws:iam::819527464446:role/LambdaAdmin'
      CodeUri: functions/dashboard
      Events:
        GetDashboardData:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /dashboard
            Method: GET
