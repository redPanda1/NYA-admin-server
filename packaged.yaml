AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NYA Admin Server
Parameters:
  UserPoolId:
    Type: String
    Description: User Pool for Cognito authentication
    Default: us-east-1_av7KxAnez
  Audience:
    Type: String
    Description: Client ID in user pool
    Default: 1jajhlcqd1rbcbi9m0qhc3ovt8
Globals:
  Function:
    Runtime: python3.8
    Timeout: 15
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: UserAuth
        Authorizers:
          UserAuth:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
              - Ref: Audience
      CorsConfiguration:
        AllowHeaders:
        - Authorization
        - Content-Type
        AllowMethods:
        - GET
        - POST
        AllowOrigins:
        - http://localhost:8080
        - https://simon50.com
        - https://www.simon50.com
        - http://simon50.com
        - http://www.simon50.com
        - http://deiangels.com
        - http://localhost:3000
  test:
    Type: AWS::Serverless::Function
    Properties:
      Handler: test.lambda_handler
      Description: Test API response
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/5bd6652b2ec8fdc80abae0b15c82ff30
      Events:
        TestCall:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  testAuth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: testAuth.lambda_handler
      Description: Authenticated Test API response
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/5bd6652b2ec8fdc80abae0b15c82ff30
      Events:
        TestAuth:
          Type: HttpApi
          Properties:
            Path: /auth
            Method: GET
            ApiId:
              Ref: HttpApi
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.lambda_handler
      Description: Process userID/Password or refreshToken authentication
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/0affd0e69a2a16732f48ed8995fff381
      Events:
        Login:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  getCompany:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompany.lambda_handler
      Description: Get all details for a specific company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e14327474fcd32d5e535292fcccf340c
      Events:
        GetCompany:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company
            Method: GET
  getCompanyList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompanyList.lambda_handler
      Description: Get summary details for all companies matching the optional filter
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e14327474fcd32d5e535292fcccf340c
      Events:
        GetCompanyList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company/list
            Method: GET
  getCompanyEmailList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompanyEmailList.lambda_handler
      Description: Get summary details for all companies showing email status
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e14327474fcd32d5e535292fcccf340c
      Events:
        GetCompanyEmailList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company/email
            Method: GET
  getPerson:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPerson.lambda_handler
      Description: Get all data held on a specific person
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/412c82fc49d414512b2c203b2308129c
      Events:
        GetPerson:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person
            Method: GET
  getPersonList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPersonList.lambda_handler
      Description: Get summary details of all Person records matching the optional
        filter
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/412c82fc49d414512b2c203b2308129c
      Events:
        GetPersonList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person/list
            Method: GET
  updatePerson:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePerson.lambda_handler
      Description: Update Person record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/412c82fc49d414512b2c203b2308129c
      Events:
        UpdatePerson:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person
            Method: POST
  templateList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: templateList.lambda_handler
      Description: List all Templates
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/46504f3191f2dcb619898f0ea9b047c3
      Events:
        TemplateList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email/template/list
            Method: GET
  getTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getTemplate.lambda_handler
      Description: Get Template Data
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/46504f3191f2dcb619898f0ea9b047c3
      Events:
        GetTemplate:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email/template
            Method: GET
  sendEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmail.lambda_handler
      Description: Send email communication to company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/46504f3191f2dcb619898f0ea9b047c3
      Events:
        SendEmail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email
            Method: POST
  validateLink:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateLink.lambda_handler
      Description: Validate the CTA link
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/3e6fc1ad65cb33ae15fa5131f33643e7
      Events:
        ValidateLink:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/validate
            Method: GET
            Auth:
              Authorizer: NONE
  confirmationResponse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmationResponse.lambda_handler
      Description: Send email communication to company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/3e6fc1ad65cb33ae15fa5131f33643e7
      Events:
        ConfirmationResponse:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/confirmation
            Method: GET
            Auth:
              Authorizer: NONE
  makeAsk:
    Type: AWS::Serverless::Function
    Properties:
      Handler: makeAsk.lambda_handler
      Description: Post company request to Company reporting
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/3e6fc1ad65cb33ae15fa5131f33643e7
      Events:
        MakeAsk:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/ask
            Method: POST
            Auth:
              Authorizer: NONE
  postComment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postComment.lambda_handler
      Description: Post company request to Company reporting
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/3e6fc1ad65cb33ae15fa5131f33643e7
      Events:
        PostComment:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/comment
            Method: POST
            Auth:
              Authorizer: NONE
  uploadReportFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploadReportFile.lambda_handler
      Description: Upload reporting file to S3
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/3e6fc1ad65cb33ae15fa5131f33643e7
      Events:
        UploadReportFile:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/upload
            Method: POST
            Auth:
              Authorizer: NONE
  uploadFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploadFile.lambda_handler
      Description: Upload file to S3
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/99b500a0ec3bf63a8cad32f943438f25
      Events:
        UploadFile:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /file
            Method: POST
