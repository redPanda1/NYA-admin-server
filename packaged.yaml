AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NYA Admin Server
Parameters:
  UserPoolId:
    Type: String
    Description: NYA Admin User Pool for Cognito authentication
    Default: us-east-1_Mcx33RgTq
  Audience:
    Type: String
    Description: Client ID in NYA Admin user pool
    Default: 2ne4im216icdqmmu78pk1abede
Globals:
  Function:
    Runtime: python3.8
    Timeout: 15
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        DefaultAuthorizer: UserAuth
        Authorizers:
          UserAuth:
            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              issuer:
                Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
              audience:
              - Ref: Audience
      CorsConfiguration:
        AllowHeaders:
        - Authorization
        - Content-Type
        AllowMethods:
        - GET
        - POST
        - PUT
        AllowOrigins:
        - http://localhost:8080
        - https://simon50.com
        - https://www.simon50.com
        - http://simon50.com
        - http://www.simon50.com
        - http://localhost:3000
  test:
    Type: AWS::Serverless::Function
    Properties:
      Handler: test.lambda_handler
      Description: Test API response
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/67c45ef8f670c8ad4d75afe9d1ef29c1
      Events:
        TestCall:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  testAuth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: testAuth.lambda_handler
      Description: Authenticated Test API response
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/67c45ef8f670c8ad4d75afe9d1ef29c1
      Events:
        TestAuth:
          Type: HttpApi
          Properties:
            Path: /auth
            Method: GET
            ApiId:
              Ref: HttpApi
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login.lambda_handler
      Description: Process userID/Password or refreshToken authentication
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/9c27e3d65e0c6d0fe0f5b8fb6a6de4a4
      Events:
        Login:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  passwordResetRequest:
    Type: AWS::Serverless::Function
    Properties:
      Handler: passwordResetRequest.lambda_handler
      Description: Request password reset process be started
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/9c27e3d65e0c6d0fe0f5b8fb6a6de4a4
      Events:
        PasswordResetRequest:
          Type: HttpApi
          Properties:
            Path: /auth/password/reset
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  userChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      Handler: userChangePassword.lambda_handler
      Description: User reset password based upon Auth challenge
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/9c27e3d65e0c6d0fe0f5b8fb6a6de4a4
      Events:
        UserChangePassword:
          Type: HttpApi
          Properties:
            Path: /auth/password/change
            Method: GET
            ApiId:
              Ref: HttpApi
            Auth:
              Authorizer: NONE
  getCompany:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompany.lambda_handler
      Description: Get all details for a specific company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        GetCompany:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company
            Method: GET
  getCompanyList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompanyList.lambda_handler
      Description: Get summary details for all companies matching the optional filter
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        GetCompanyList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company/list
            Method: GET
  getCompanyEmailList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompanyEmailList.lambda_handler
      Description: Get summary details for all companies showing email status
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        GetCompanyEmailList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company/email
            Method: GET
  getCompanyListStatus:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getCompanyListStatus.lambda_handler
      Description: Get details for companies based upon status/period filters
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        GetCompanyListStatus:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company/list/status
            Method: GET
  updateCompany:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateCompany.lambda_handler
      Description: Update Company record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        UpdateCompany:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company
            Method: POST
  createCompany:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createCompany.lambda_handler
      Description: Create Company record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/8faace79dffd208cc426a8a627984a7b
      Events:
        CreateCompany:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /company
            Method: PUT
  getPerson:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPerson.lambda_handler
      Description: Get all data held on a specific person
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/f8deaa07d1d30b0a75d6b77eb17471b8
      Events:
        GetPerson:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person
            Method: GET
  getPersonList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPersonList.lambda_handler
      Description: Get summary details of all Person records matching the optional
        filter
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/f8deaa07d1d30b0a75d6b77eb17471b8
      Events:
        GetPersonList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person/list
            Method: GET
  updatePerson:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePerson.lambda_handler
      Description: Update Person record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/f8deaa07d1d30b0a75d6b77eb17471b8
      Events:
        UpdatePerson:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person
            Method: POST
  createPerson:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createPerson.lambda_handler
      Description: Create Person record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/f8deaa07d1d30b0a75d6b77eb17471b8
      Events:
        CreatePerson:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /person
            Method: PUT
  templateList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: templateList.lambda_handler
      Description: List all Templates
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e0ed0baba0e31faba7fdf646e5e504bb
      Events:
        TemplateList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email/template/list
            Method: GET
  getTemplate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getTemplate.lambda_handler
      Description: Get Template Data
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e0ed0baba0e31faba7fdf646e5e504bb
      Events:
        GetTemplate:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email/template
            Method: GET
  sendEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmail.lambda_handler
      Description: Send email communication to company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e0ed0baba0e31faba7fdf646e5e504bb
      Events:
        SendEmail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email
            Method: POST
  sendMemberEmail:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendMemberEmail.lambda_handler
      Description: Send email communication to NYA Member
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/e0ed0baba0e31faba7fdf646e5e504bb
      Events:
        SendMemberEmail:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /email/member
            Method: POST
  validateLink:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateLink.lambda_handler
      Description: Validate the CTA link
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        ValidateLink:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/validate
            Method: GET
            Auth:
              Authorizer: NONE
  validateCompany:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateCompany.lambda_handler
      Description: Validate the CTA link - Company Only
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        ValidateCompany:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/validatecompany
            Method: GET
            Auth:
              Authorizer: NONE
  validateMember:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validateMember.lambda_handler
      Description: Validate the CTA link - Member Only
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        ValidateMember:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/validatemember
            Method: GET
            Auth:
              Authorizer: NONE
  confirmationResponse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: confirmationResponse.lambda_handler
      Description: Send email communication to company
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        ConfirmationResponse:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/confirmation
            Method: GET
            Auth:
              Authorizer: NONE
  makeAsk:
    Type: AWS::Serverless::Function
    Properties:
      Handler: makeAsk.lambda_handler
      Description: Post company request to Company reporting
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        MakeAsk:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/ask
            Method: POST
            Auth:
              Authorizer: NONE
  postComment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postComment.lambda_handler
      Description: Post company request to Company reporting
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        PostComment:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/comment
            Method: POST
            Auth:
              Authorizer: NONE
  uploadReportFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploadReportFile.lambda_handler
      Description: Upload reporting file to S3
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        UploadReportFile:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/upload
            Method: POST
            Auth:
              Authorizer: NONE
  postContact:
    Type: AWS::Serverless::Function
    Properties:
      Handler: postContact.lambda_handler
      Description: Post Company Reporting contact
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        PostComment:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/contact
            Method: POST
            Auth:
              Authorizer: NONE
  updateMember:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateMember.lambda_handler
      Description: Update Person (Member) record
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        UpdateMember:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/member
            Method: POST
            Auth:
              Authorizer: NONE
  uploadMemberPhoto:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploadMemberPhoto.lambda_handler
      Description: Upload photo from Member
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/59e005c592aec66ee650a4d989b08331
      Events:
        UploadMemberPhoto:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /cta/member/photo
            Method: POST
            Auth:
              Authorizer: NONE
  uploadFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: uploadFile.lambda_handler
      Description: Upload file to S3
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/91d94d48e3379cbbae3a4d162c89a12a
      Events:
        UploadFile:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /file
            Method: POST
  downloadFile:
    Type: AWS::Serverless::Function
    Properties:
      Handler: downloadFile.lambda_handler
      Description: Download file from S3
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/91d94d48e3379cbbae3a4d162c89a12a
      Events:
        UploadFile:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /file
            Method: GET
  getPeriodData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getPeriodData.lambda_handler
      Description: Get Period Data
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/d155f631c92a24c27e9c968f5f1b7671
      Events:
        GetPeriodData:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /admin/periods
            Method: GET
  updatePeriodData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updatePeriodData.lambda_handler
      Description: Update Period Data
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/d155f631c92a24c27e9c968f5f1b7671
      Events:
        UpdatePeriodData:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /admin/periods
            Method: POST
  getUserList:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getUserList.lambda_handler
      Description: Get List of Users
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/d155f631c92a24c27e9c968f5f1b7671
      Events:
        getUserList:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /admin/users
            Method: GET
  createNewUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: createNewUser.lambda_handler
      Description: Create New User Record - Admin
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/d155f631c92a24c27e9c968f5f1b7671
      Events:
        CreateNewUser:
          Type: HttpApi
          Properties:
            Path: /admin/user
            Method: POST
            ApiId:
              Ref: HttpApi
  adminChangePassword:
    Type: AWS::Serverless::Function
    Properties:
      Handler: adminChangePassword.lambda_handler
      Description: Change User Password - Admin
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/d155f631c92a24c27e9c968f5f1b7671
      Events:
        AdminChangePassword:
          Type: HttpApi
          Properties:
            Path: /admin/user/password
            Method: POST
            ApiId:
              Ref: HttpApi
  getDashboardData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getDashboardData.lambda_handler
      Description: Get Dashboard Data
      Role: arn:aws:iam::819527464446:role/LambdaAdmin
      CodeUri: s3://com.simon50.serverless-api/42a62d14664b0120b9c9c71704d8e7d1
      Events:
        GetDashboardData:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: HttpApi
            Path: /dashboard
            Method: GET
